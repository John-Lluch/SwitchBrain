//
//  Text.cpp
//  Invaders
//
//  Created by Joan Lluch on 5/5/24.
//

#include "Text.hpp"

#include "Display.hpp"
extern Display ds;

#define PROGMEM




struct __attribute__((packed))
{
  const uint8_t All [0] PROGMEM = { } ;
  const uint8_t Number [10*8] PROGMEM =
  {
    0b00111000, // 0
    0b01000100,
    0b01001100,
    0b01010100,
    0b01100100,
    0b01000100,
    0b00111000,
    0b00000000,
    
    0b00010000, // 1
    0b00110000,
    0b00010000,
    0b00010000,
    0b00010000,
    0b00010000,
    0b00111000,
    0b00000000,
    
    0b00111000, // 2
    0b01000100,
    0b00000100,
    0b00011000,
    0b00100000,
    0b01000000,
    0b01111100,
    0b00000000,
    
    0b01111100, // 3
    0b00000100,
    0b00001000,
    0b00011000,
    0b00000100,
    0b01000100,
    0b00111000,
    0b00000000,
    
    0b00001000, // 4
    0b00011000,
    0b00101000,
    0b01001000,
    0b01111100,
    0b00001000,
    0b00001000,
    0b00000000,
    
    0b01111100, // 5
    0b01000000,
    0b01000000,
    0b00111000,
    0b00000100,
    0b01000100,
    0b00111000,
    0b00000000,
    
    0b00011100, // 6
    0b00100000,
    0b01000000,
    0b01111000,
    0b01000100,
    0b01000100,
    0b00111000,
    0b00000000,
    
    0b01111100, // 7
    0b00000100,
    0b00001000,
    0b00010000,
    0b00100000,
    0b00100000,
    0b00100000,
    0b00000000,
    
    0b00111000, // 8
    0b01000100,
    0b01000100,
    0b00111000,
    0b01000100,
    0b01000100,
    0b00111000,
    0b00000000,
    
    0b00111000, // 9
    0b01000100,
    0b01000100,
    0b00111100,
    0b00000100,
    0b00001000,
    0b01110000,
    0b00000000,
  };
  
  const uint8_t Special [7*8] PROGMEM =
  {
    0b00010000, // :  use ':' to draw '*'
    0b01010100,
    0b00111000,
    0b00010000,
    0b00111000,
    0b01010100,
    0b00010000,
    0b00000000,
    
    0b00000000, // ;  use ';' to draw '-'
    0b00000000,
    0b00000000,
    0b01111100,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    
    0b00001000, // <
    0b00010000,
    0b00100000,
    0b01000000,
    0b00100000,
    0b00010000,
    0b00001000,
    0b00000000,
    
    0b00000000, // =
    0b00000000,
    0b01111000,
    0b00000000,
    0b01111000,
    0b00000000,
    0b00000000,
    0b00000000,
    
    0b00100000, // >
    0b00010000,
    0b00001000,
    0b00000100,
    0b00001000,
    0b00010000,
    0b00100000,
    0b00000000,
    
    0b01110000, // ?
    0b10001000,
    0b00010000,
    0b00100000,
    0b00100000,
    0b00000000,
    0b00100000,
    0b00000000,
    
    0b00000000, // @  use '@' to draw ' '
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
  };
  
  const uint8_t Alphabeth [26*8] PROGMEM =
  {
    0b00010000, // A  (0)<<3
    0b00101000,
    0b01000100,
    0b01000100,
    0b01111100,
    0b01000100,
    0b01000100,
    0b00000000,
    
    0b01111000, // B  (1)<<3
    0b01000100,
    0b01000100,
    0b01111000,
    0b01000100,
    0b01000100,
    0b01111100,
    0b00000000,
    
    0b00111000, // C  (2)<<3
    0b01000100,
    0b01000000,
    0b01000000,
    0b01000000,
    0b01000100,
    0b00111000,
    0b00000000,
    
    0b01111000, // D  (3)<<3
    0b01000100,
    0b01000100,
    0b01000100,
    0b01000100,
    0b01000100,
    0b01111000,
    0b00000000,
    
    0b01111100, // E  (4)<<3
    0b01000000,
    0b01000000,
    0b01111000,
    0b01000000,
    0b01000000,
    0b01111100,
    0b00000000,
    
    0b01111100, // F  (5)<<3
    0b01000000,
    0b01000000,
    0b01111000,
    0b01000000,
    0b01000000,
    0b01000000,
    0b00000000,
    
    0b00111000, // G  (6)<<3
    0b01000100,
    0b01000000,
    0b01011100,
    0b01000100,
    0b01000100,
    0b00111000,
    0b00000000,
    
    0b01000100, // H  (7)<<3
    0b01000100,
    0b01000100,
    0b01111100,
    0b01000100,
    0b01000100,
    0b01000100,
    0b00000000,
    
    0b00011100, // I  (8)<<3
    0b00001000,
    0b00001000,
    0b00001000,
    0b00001000,
    0b00001000,
    0b00011100,
    0b00000000,
    
    0b00000100, // J  (9)<<3
    0b00000100,
    0b00000100,
    0b00000100,
    0b00000100,
    0b01000100,
    0b00111000,
    0b00000000,
    
    0b01000100, // K  (10)<<3
    0b01001000,
    0b01010000,
    0b01100000,
    0b01010000,
    0b01001000,
    0b01000100,
    0b00000000,
    
    0b01000000, // L  (11)<<3
    0b01000000,
    0b01000000,
    0b01000000,
    0b01000000,
    0b01000000,
    0b01111100,
    0b00000000,
    
    0b01000100, // M  (12)<<3
    0b01101100,
    0b01010100,
    0b01010100,
    0b01000100,
    0b01000100,
    0b01000100,
    0b00000000,
    
    0b01000100, // N  (13)<<3
    0b01000100,
    0b01100100,
    0b01010100,
    0b01001100,
    0b01000100,
    0b01000100,
    0b00000000,
    
    0b00111000, // O  (14)<<3
    0b01000100,
    0b01000100,
    0b01000100,
    0b01000100,
    0b01000100,
    0b00111000,
    0b00000000,
    
    0b01111000, // P  (15)<<3
    0b01000100,
    0b01000100,
    0b01111000,
    0b01000000,
    0b01000000,
    0b01000000,
    0b00000000,
    
    0b00111000, // Q  (16)<<3
    0b01000100,
    0b01000100,
    0b01000100,
    0b01010100,
    0b01001100,
    0b00111100,
    0b00000000,
    
    0b01111000, // R  (17)<<3
    0b01000100,
    0b01000100,
    0b01111000,
    0b01010000,
    0b01001000,
    0b01000100,
    0b00000000,
    
    0b00111000, // S  (18)<<3
    0b01000100,
    0b01000000,
    0b00111000,
    0b00000100,
    0b01000100,
    0b00111000,
    0b00000000,
    
    0b01111100, // T  (19)<<3
    0b00010000,
    0b00010000,
    0b00010000,
    0b00010000,
    0b00010000,
    0b00010000,
    0b00000000,
    
    0b01000100, // U  (20)<<3
    0b01000100,
    0b01000100,
    0b01000100,
    0b01000100,
    0b01000100,
    0b00111000,
    0b00000000,
    
    0b01000100, // V  (21)<<3
    0b01000100,
    0b01000100,
    0b01000100,
    0b01000100,
    0b00101000,
    0b00010000,
    0b00000000,
    
    0b01000100, // W  (22)<<3
    0b01000100,
    0b01000100,
    0b01010100,
    0b01010100,
    0b01101100,
    0b01000100,
    0b00000000,
    
    0b01000100, // X  (23)<<3
    0b01000100,
    0b00101000,
    0b00010000,
    0b00101000,
    0b01000100,
    0b01000100,
    0b00000000,
    
    0b01000100, // Y  (24)<<3
    0b01000100,
    0b00101000,
    0b00010000,
    0b00010000,
    0b00010000,
    0b00010000,
    0b00000000,
    
    0b01111100, // Z  (25)<<3
    0b00000100,
    0b00001000,
    0b00010000,
    0b00100000,
    0b01000000,
    0b01111100,
    0b00000000,
  };
} Gliphs;


// only alphanumeric and a reduced set of special charactera are supported
// some special characters are reencoded in non-ascii positions, check table above

// draw character in pixel coordinates
static void drawGliph( int16_t x, int16_t y, uint8_t c, uint16_t color )
{
  ds.drawBitmap(x, y, Gliphs.All + (c<<3), 8, 8, color, SWCOLOR_BLACK, !(x & 7) );
}

// draw number in pixel coordinates
void drawNum( int16_t x, int16_t y, uint16_t num, uint16_t size, uint16_t color )
{
  const uint16_t factors[] = {1, 10, 100, 1000, 10000};
  for ( int i=size-1 ;  i>=0; i--, x+=8)
  {
    uint8_t d = 0;
    while ( num >= factors[i] )
    {
      d = d + 1;
      num = num - factors[i];
    }
    drawGliph(x, y, d, color );
  }
}

// print string in character coordinates
void print(int16_t cx, int16_t cy, const char *str, uint16_t color )
{
  while ( *str )
    drawGliph((cx++)<<3, cy<<3, (*str++)-'0', color);
}

// print number in character coordinates
void print( int16_t cx, int16_t cy, uint16_t num, uint16_t size, uint16_t color )
{
  drawNum( cx<<3, cy<<3, num, size, color );
}
